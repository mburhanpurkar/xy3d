#include <iostream>
#include <cmath>
#define _USE_MATH_DEFINES
using namespace std;

// Okay, now I just need to reproduce the python result in C++ and then we're goldennnn
// Because C++ sucks, I'm just going to copy and paste the relevant arrays here
// The outermost loop spins have been randomized to (hopefully) prevent false vortex detections!

double charge_1[6][6] ={ { 0.8179669295222798 ,  1.198986673148786 ,  5.644002365634459 ,  1.5333391404623624 ,  3.722143791170981 ,  3.285054454414716 }, { 5.635909691758364 ,  3.9269908169872414 ,  3.4033920413889436 ,  2.879793265790645 ,  2.356194490192346 ,  1.0098682076004672 }, { 2.045447345311195 ,  4.4505895925855405 ,  3.9269908169872414 ,  2.356194490192345 ,  1.8325957145940475 ,  2.7875345513198453 }, { 0.35615377083914546 ,  4.97418836818384 ,  5.497787143782138 ,  0.7853981633974483 ,  1.3089969389957485 ,  2.5829772235225064 }, { 4.72365859049568 ,  5.497787143782139 ,  6.021385919380438 ,  0.2617993877991509 ,  0.7853981633974497 ,  0.19384176854906474 }, { 5.620030676952596 ,  2.3650411002825087 ,  2.9223759105749036 ,  2.6803402321879726 ,  0.8166942800653045 ,  3.6266723988443865 } };

//{ { 1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  3.9269908169872414 ,  3.4033920413889436 ,  2.879793265790645 ,  2.356194490192346 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  4.4505895925855405 ,  3.9269908169872414 ,  2.356194490192345 ,  1.8325957145940475 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  4.97418836818384 ,  5.497787143782138 ,  0.7853981633974483 ,  1.3089969389957485 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  5.497787143782139 ,  6.021385919380438 ,  0.2617993877991509 ,  0.7853981633974497 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 } };
//

double charge_n1[6][6] = { { 4.699945657144701 ,  3.9267491192021464 ,  3.250567554841327 ,  2.382865926460877 ,  4.545318562226055 ,  0.4203079958915 }, { 3.350151663756791 ,  3.9269908169872414 ,  4.4505895925855405 ,  4.97418836818384 ,  5.497787143782139 ,  5.395019113568395 }, { 5.087201131122399 ,  3.4033920413889427 ,  3.9269908169872414 ,  5.497787143782138 ,  6.021385919380438 ,  6.180815078362668 }, { 4.204466893314309 ,  2.879793265790644 ,  2.356194490192345 ,  0.7853981633974483 ,  0.26179938779915024 ,  3.1807262532592144 }, { 2.851218909220657 ,  2.3561944901923453 ,  1.8325957145940466 ,  1.3089969389957479 ,  0.7853981633974491 ,  5.836297501626585 }, { 3.4152724841853677 ,  2.3269850778738586 ,  1.2856119478238197 ,  5.077716413668531 ,  4.374969145720675 ,  3.414792597522557 } };

double charge_2[6][6] = { { 5.741805668372115 ,  3.2087934429082337 ,  2.162758799491235 ,  2.9036562680877664 ,  3.7140146186641214 ,  4.604126295527672 }, { 2.3940899774597275 ,  3.9269908169872414 ,  2.8797932657906418 ,  1.8325957145940441 ,  0.7853981633974465 ,  4.090524228809605 }, { 1.5286090636035405 ,  4.974188368183839 ,  3.9269908169872414 ,  0.7853981633974483 ,  6.021385919380435 ,  2.7787808159752423 }, { 4.016770144200289 ,  6.021385919380436 ,  0.7853981633974483 ,  3.9269908169872414 ,  4.974188368183838 ,  6.089435847025078 }, { 1.6958122466354004 ,  0.7853981633974474 ,  1.832595714594045 ,  2.8797932657906427 ,  3.9269908169872405 ,  2.3865907094236065 }, { 2.784000112996882 ,  4.053799593114877 ,  2.9499022250531417 ,  2.5791960463231223 ,  6.011200921197592 ,  3.889470513950284 } };

double charge_n2[6][6] = { { 6.154462453238655 ,  1.0886506910848657 ,  4.839221562839094 ,  4.526742554482691 ,  4.685005359824117 ,  4.550765884305052 }, { 3.8420116427894886 ,  3.9269908169872414 ,  4.974188368183841 ,  6.021385919380438 ,  0.7853981633974496 ,  0.49162704209864844 }, { 3.0202952502062144 ,  2.879793265790644 ,  3.9269908169872414 ,  0.7853981633974483 ,  1.8325957145940472 ,  6.120426820696797 }, { 5.863963272823047 ,  1.8325957145940464 ,  0.7853981633974483 ,  3.9269908169872414 ,  2.879793265790645 ,  2.6047871786480705 }, { 2.23181418637663 ,  0.7853981633974487 ,  6.021385919380437 ,  4.97418836818384 ,  3.9269908169872423 ,  3.5447886417916608 }, { 5.570728455086396 ,  3.736797605776436 ,  4.928140496202144 ,  4.371273772450328 ,  1.9477381835182945 ,  5.776619891608231 } };



// double charge_1[4][4] = { { 3.9269908169872414 ,  3.4033920413889436 ,  2.879793265790645 ,  2.356194490192346 },
// 			  { 4.4505895925855405 ,  3.9269908169872414 ,  2.356194490192345 ,  1.8325957145940475 },
// 			  { 4.97418836818384 ,  5.497787143782138 ,  0.7853981633974483 ,  1.3089969389957485 },
// 			  { 5.497787143782139 ,  6.021385919380438 ,  0.2617993877991509 ,  0.7853981633974497 } };
    
// double charge_n1[4][4] = { { 3.9269908169872414 ,  4.4505895925855405 ,  4.97418836818384 ,  5.497787143782139 },
// 			   { 3.4033920413889427 ,  3.9269908169872414 ,  5.497787143782138 ,  6.021385919380438 },
// 			   { 2.879793265790644 ,  2.356194490192345 ,  0.7853981633974483 ,  0.26179938779915024 },
// 			   { 2.3561944901923453 ,  1.8325957145940466 ,  1.3089969389957479 ,  0.7853981633974491 } };

// double charge_2[4][4] = { { 3.9269908169872414 ,  2.8797932657906418 ,  1.8325957145940441 ,  0.7853981633974465 },
// 			  { 4.974188368183839 ,  3.9269908169872414 ,  0.7853981633974483 ,  6.021385919380435 },
// 			  { 6.021385919380436 ,  0.7853981633974483 ,  3.9269908169872414 ,  4.974188368183838 },
// 			  { 0.7853981633974474 ,  1.832595714594045 ,  2.8797932657906427 ,  3.9269908169872405 } };

// double charge_n2[4][4] = { { 3.9269908169872414 ,  4.974188368183841 ,  6.021385919380438 ,  0.7853981633974496 },
// 			   { 2.879793265790644 ,  3.9269908169872414 ,  0.7853981633974483 ,  1.8325957145940472 },
// 			   { 1.8325957145940464 ,  0.7853981633974483 ,  3.9269908169872414 ,  2.879793265790645 },
// 			   { 0.7853981633974487 ,  6.021385919380437 ,  4.97418836818384 ,  3.9269908169872423 } };

int outer_loop[13][2] = {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {3, 1}, {3, 2}, {3, 3}, {2, 3}, {1, 3}, {0, 3}, {0, 2}, {0, 1}, {0, 0}};

const int L = 6;

inline double another_constrain(double x) {
    if (x < -M_PI)
	return another_constrain(x + 2 * M_PI);
    if (x > M_PI)
	return another_constrain(x - 2 * M_PI);
    return x;
}

double vorticity(double arr[4][4]) {
    double delta = 0.0;

    for (int i=0; i < 12; i++)
	delta += another_constrain(arr[outer_loop[i + 1][0]][outer_loop[i + 1][1]] - arr[outer_loop[i][0]][outer_loop[i][1]]);

    return delta / 2.0 / M_PI;
}


// One more test--check that the actual more general function we use in the .h file checks out
// on this data too!
inline int pbc(int n) {
    return n >= 0 ? n % L : L + (n % L);
}

void print(int arr[13][2], double state[L][L]) {
    for (int i=0; i < 13; i++) {
    	int x = pbc(arr[i][0]);
    	int y = pbc(arr[i][1]);
    	cout << state[x][y] << ", ";
    }
    cout << "\n";
}

void total_vorticity(double state[L][L]){
    int m[4];
    for (int i=0; i < 4; i++)
	m[i] = 0;
    for (int x=0; x < L; ++x) {
	for (int y=0; y < L; ++y) {
	    const int len = 13;
	    int arr[len][2] = {{x, y}, {x + 1, y}, {x + 2, y}, {x + 3, y},
			       {x + 3, y + 1}, {x + 3, y + 2}, {x + 3, y + 3},
			       {x + 2, y + 3}, {x + 1, y + 3}, {x, y + 3},
			       {x, y + 2}, {x, y + 1}, {x, y}};
	    

	    double delta = 0.0;
 
	    for (int i=0; i < len - 1; ++i) {
	    	int x1 = pbc(arr[i + 1][0]);
	    	int y1 = pbc(arr[i + 1][1]);
	    	int x2 = pbc(arr[i][0]);
	    	int y2 = pbc(arr[i][1]);
	    	delta += another_constrain(state[x1][y1] - state[x2][y2]);
		double x = abs(another_constrain(state[x1][y1] - state[x2][y2])) - M_PI;
		if (abs(x) < M_PI / 1.8) {
		    delta = 0.0;
		    i = len;
		}
	    }

	    if (abs(delta + 4 * M_PI) < 0.01) {
		m[0] += 1;
		//cout << "-2: " << x << " " << y  << endl;
		//print(arr, state);
	    }
	    else if (abs(delta + 2 * M_PI) < 0.01) {
	        m[1] += 1;
		//cout << "-1: " << x  << " " << y  << endl;
		//print(arr, state);
	    }
	    else if (abs(delta - 2 * M_PI) < 0.01) {
	        m[2] += 1;
		//cout << "1: " << x  << " " << y << endl;
		//print(arr, state);
	    }
	    else if (abs(delta - 4 * M_PI) < 0.01) {
	        m[3] += 1;
		//cout << "2: " << x << " " << y  << endl;
		//print(arr, state);
	    }
	}
    }

    // Print the array
    cout << "****";
    for (int i=0; i < 4; i++)
	cout << m[i] << " ";
    cout << "\n";
}

int main(void) {
    // cout << vorticity(charge_1) << endl;
    // cout << vorticity(charge_n1) << endl;
    // cout << vorticity(charge_2) << endl;
    // cout << vorticity(charge_n2) << endl;

    total_vorticity(charge_1);
    total_vorticity(charge_n1); 
    total_vorticity(charge_2);
    total_vorticity(charge_n2);
}
